import sys
sys.path.append("C:/development/Python/pyall")

import argparse
from datetime import datetime
import geodetic
from glob import glob
import pyall
import time
import os.path
import warnings
from xml.etree import ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment, ElementTree, tostring
import xml.dom.minidom

def main():
    parser = argparse.ArgumentParser(description='Read Kongsberg ALL file and create a caris vcfvessel config file.')
    parser.add_argument('-i', dest='inputFile', action='store', help='-i <ALLfilename> : input ALL filename to image. It can also be a wildcard, e.g. *.all')

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)
    
    args = parser.parse_args()

    print ("processing with settings: ", args)
    for filename in glob(args.inputFile):

        r = pyall.ALLReader(filename)
        start_time = time.time() # time  the process
        InstallationRecordCount = 0
        while r.moreData():
            # read a datagram.  If we support it, return the datagram type and aclass for that datagram
            # The user then needs to call the read() method for the class to undertake a fileread and binary decode.  This keeps the read super quick.
            TypeOfDatagram, datagram = r.readDatagram()

            if TypeOfDatagram == 'I':
                datagram.read()
                print (datagram.installationParameters)
                InstallationRecordCount = InstallationRecordCount + 1
                writeVCFFile()

        # print("Read Duration: %.3f seconds, InstallationRecordCount %d" % (time.time() - start_time),  InstallationRecordCount) # print the processing time. It is handy to keep an eye on processing performance.

# <?xml version="1.0"?>
# <HIPSVesselConfig Version="2.0">
#   <VesselShape>
#     <PlanCoordinates/>
#     <ProfileCoordinates/>
#     <RP Length="0.000000" Width="0.000000" Height="0.000000"/>
#   </VesselShape>
#   <NavSensor>
#     <TimeStamp value="2016-001 00:00:00">
#       <Latency value="0.000000"/>
#       <Ellipse value="WG84"/>
#       <Offsets X="0.000000" Y="0.000000" Z="0.000000"/>
#     </TimeStamp>
#   </NavSensor>
#   <GyroSensor>
#     <TimeStamp value="2016-001 00:00:00">
#       <Latency value="0.000000"/>
#       <ApplyFlag value="No"/>
#     </TimeStamp>
#   </GyroSensor>
#   <HeaveSensor>

def writeVCFFile():

    # <?xml version="1.0" ?>
    # <top>
    #   <!--Generated for PyMOTW-->
    #   <child>
    #     This child contains text.
    #   </child>
    #   <child_with_tail>
    #     This child has regular text.
    #   </child_with_tail>
    #   And &quot;tail&quot; text.
    #   <child_with_entity_ref>
    #     This &amp; that

    root = Element('HIPSVesselConfig Version="2.0"')
    # comment = Comment('Generated by pyAllVesselConfig')
    # top.append(comment)


    VesselShape = SubElement(root, 'VesselShape')
    # VesselShape.text = 'This child contains text.'
    PlanCoordinates = SubElement(VesselShape, 'PlanCoordinates')
    # print (root)
    document = ElementTree(root)
    document. write('file.xml', encoding='utf-8', xml_declaration=True)
    
    xxxml = xml.dom.minidom.parse('file.xml') 
    pretty_xml_as_string = xml.toprettyxml()

# def update_progress(job_title, progress):
#     length = 20 # modify this to change the length
#     block = int(round(length*progress))
#     msg = "\r{0}: [{1}] {2}%".format(job_title, "#"*block + "-"*(length-block), round(progress*100, 2))
#     if progress >= 1: msg += " DONE\r\n"
#     sys.stdout.write(msg)
#     sys.stdout.flush()

if __name__ == "__main__":
    main()

